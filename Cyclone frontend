import { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import axios from "axios";

export default function CyclonePrediction() {
  const [prediction, setPrediction] = useState(null);
  const [loading, setLoading] = useState(false);
  const [csvFile, setCsvFile] = useState(null);
  const [trainingMetrics, setTrainingMetrics] = useState(null);

  const fetchPrediction = async () => {
    setLoading(true);
    try {
      const response = await axios.get("http://localhost:8000/predict/");
      setPrediction(response.data.data);
    } catch (error) {
      console.error("Error fetching prediction", error);
    }
    setLoading(false);
  };

  const handleFileUpload = async (event) => {
    const file = event.target.files[0];
    setCsvFile(file);
  };

  const uploadAndTrain = async () => {
    if (!csvFile) return;
    const formData = new FormData();
    formData.append("file", csvFile);
    setLoading(true);
    try {
      const response = await axios.post("http://localhost:8000/upload-csv/", formData, {
        headers: { "Content-Type": "multipart/form-data" },
      });
      setTrainingMetrics(response.data.metrics);
    } catch (error) {
      console.error("Error uploading file", error);
    }
    setLoading(false);
  };

  return (
    <div className="flex flex-col items-center p-4">
      <h1 className="text-2xl font-bold mb-4">ðŸŒª Cyclone Prediction</h1>
      <input type="file" onChange={handleFileUpload} className="mb-2" />
      <Button onClick={uploadAndTrain} disabled={loading}>
        {loading ? "Training..." : "Upload & Train Model"}
      </Button>
      {trainingMetrics && (
        <Card className="mt-4 p-4">
          <CardContent>
            <h2 className="text-lg font-semibold">Model Performance Metrics</h2>
            <pre>{JSON.stringify(trainingMetrics, null, 2)}</pre>
          </CardContent>
        </Card>
      )}
      <Button onClick={fetchPrediction} disabled={loading} className="mt-4">
        {loading ? "Predicting..." : "Get Real-time Prediction"}
      </Button>
      {prediction && (
        <Card className="mt-4 p-4 bg-gray-100">
          <CardContent>
            <h2 className="text-lg font-semibold">Prediction Result</h2>
            <p>Risk Level: {prediction.risk_level}</p>
            <p>Cyclone Probability: {(prediction.cyclone_probability * 100).toFixed(2)}%</p>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
